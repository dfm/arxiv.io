#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function, absolute_import

import sys
import logging
from datetime import date, timedelta

from arxiv.models import *
from arxiv import create_app
from arxiv.database import db
from arxiv.scraper import download, parse


if __name__ == "__main__":
    import argparse

    # Parse the command line arguments.
    parser = argparse.ArgumentParser(description="Scrape the arXiv metadata.")
    parser.add_argument("--since", default=None, help="The starting date.")
    parser.add_argument("--until", default=None, help="The end date.")
    parser.add_argument("--config", default=None,
                        help="The path to the local configuration file.")
    parser.add_argument("--log", default=None,
                        help="The path to the log file.")
    parser.add_argument("--drop", action="store_true",
                        help="Drop the SQL tables")
    parser.add_argument("--create", action="store_true",
                        help="Create the SQL tables")
    args = parser.parse_args()

    largs = dict(level=logging.INFO,
                 format="[%(asctime)s] %(name)s:%(levelname)s:%(message)s")
    if args.log is not None:
        largs["filename"] = args.log
    logging.basicConfig(**largs)

    # Initialize a flask app.
    app = create_app(args.config)

    # SQL tables.
    if args.drop:
        logging.info("Dropping tables")
        db.drop_all(app=app)
        sys.exit(0)
    if args.create:
        logging.info("Creating tables")
        db.create_all(app=app)

        # Pre-make the category list.
        with app.test_request_context():
            [db.session.add(Category(c.strip()))
             for c in open("categories.txt")]
            db.session.commit()
        sys.exit(0)

    # Set up the app in a request context.
    with app.test_request_context():
        if args.since is not None:
            since = args.since
        else:
            yesterday = date.today() - timedelta(1)
            since = yesterday.strftime("%Y-%m-%d")

        logging.info("Fetching metadata {0} -- {1}".format(since, until))
        l = download(since, args.until)

        logging.info("Parsing results")
        map(parse, l)
